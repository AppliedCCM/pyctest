#!@PYTHON_EXECUTABLE@
# MIT License
#
# Copyright (c) 2018, The Regents of the University of California,
# through Lawrence Berkeley National Laboratory (subject to receipt of any
# required approvals from the U.S. Dept. of Energy).  All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

from __future__ import absolute_import

import os
import sys
import imp
import ctypes
import platform
import warnings
from ctypes.util import find_library

# get the path to this directory
this_path = os.path.abspath(os.path.dirname(__file__))

_tim_pypath = '@PYCTEST_INSTALL_FULL_PYTHONDIR@'
_tim_libpath = '@PYCTEST_INSTALL_FULL_LIBDIR@'
_tim_buildpath = '@PROJECT_BINARY_DIR@'

if platform.system() == "Windows":
    _tim_pypath = _tim_pypath.replace("/", "\\")
    _tim_libpath = _tim_libpath.replace("/", "\\")
    _tim_buildpath = _tim_buildpath.replace("/", "\\")

_tim_buildpath = os.path.join(_tim_buildpath, "pyctest")

# verbosity
_verbose = 0 if os.environ.get('PYCTEST_DEBUG') is None \
    else int(os.environ.get('PYCTEST_DEBUG'))

# construct info dictionary (used for build)
pyctest_info_file = os.path.join(this_path, os.path.join("lib", "pyctest_pathinfo.txt"))
pyctest_info_data = {}
if os.path.exists(pyctest_info_file):
    f = open(pyctest_info_file, "r")
    data = f.read().splitlines()
    for d in data:
        entry = d.split(" ")
        if len(entry) == 0:
            continue
        elif len(entry) == 2:
            if _verbose > 2:
                print('Adding pyctest info data: "{}" = "{}"...'.format(entry[0], entry[1]))
            pyctest_info_data[entry[0]] = entry[1]
    f.close()
    if _verbose > 0:
        print('\n### pyctest info:')
        for key, val in pyctest_info_data.items():
            print('\t"{}" : "{}"'.format(key, val))
        print ('')

# if compiled with shared library linking
if "@BUILD_SHARED_LIBS@" == "ON":

    # search for library using {DYLD,LD}_LIBRARY_PATH, LD_RUN_PATH, etc.
    tim_lib_path = find_library("pyctest")
    if tim_lib_path is None:
        tim_lib_path = find_library("libpyctest")
    
    # if not found, go to hard-coded path from installation
    if tim_lib_path is None:
        # when installed, we want to fallback to the installation path first
        # Visual Studio and Xcode put libraries in
        # <LIBRARY_OUTPUT_DIRECTORY>/<CMAKE_BUILD_TYPE> in the build tree
        alt_paths = [ _tim_libpath,
                      os.path.join(this_path, os.path.join("lib", "Debug")),
                      os.path.join(this_path, os.path.join("lib", "MinSizeRel")),
                      os.path.join(this_path, os.path.join("lib", "RelWithDebInfo")),
                      os.path.join(this_path, os.path.join("lib", "Release")),
                      os.path.join(this_path, "lib")
                    ]

        # in the build tree (when testing), we want to fallback to the build path first
        if this_path == _tim_buildpath:
            alt_paths.reverse()

        if _verbose > 2:
            print('find_library("pyctest") returned None. Trying fallback paths {}...'.format(alt_paths))

        for alt_path in alt_paths:
            # we found library path in previous iteration
            if tim_lib_path is not None and os.path.exists(tim_lib_path):
                break
            # try to find exact match first, then major version match, then generic
            for _suffix in [ ".@PYCTEST_VERSION@", ".@PYCTEST_VERSION_MAJOR@", "" ]:
                _suffix += "@CMAKE_SHARED_LIBRARY_SUFFIX@"
                _test_path = os.path.join(alt_path, "libpyctest{}".format(_suffix))
                if os.path.exists(_test_path):
                    if _verbose > 1:
                        print('Found matching alternative path: "{}"'.format(_test_path))
                    tim_lib_path = _test_path
                    break
                elif _verbose > 1:
                    print('Alternative path not valid: "{}"'.format(_test_path))

        if tim_lib_path is None and "pyctest_shared_library" in pyctest_info_data.keys():
            tim_lib_path = pyctest_info_data["pyctest_shared_library"]

    if _verbose > 0:
        print('Using pyctest shared library: {}'.format(tim_lib_path))

    # open the shared library for RPATH resolution
    lib = None
    try:
        lib = ctypes.CDLL(tim_lib_path, mode=ctypes.RTLD_GLOBAL)
    except Exception as e:
        print('Exception! Error opening pyctest shared library @ "{}"'.format(tim_lib_path))
        print(e)

def __load_module(module_name, path):
    return imp.load_module(module_name, open(path), path, ('py', 'U', imp.PY_SOURCE))

# import the pyctest python file
pyctest_py = __load_module('pyctest', os.path.join(this_path, 'pyctest.py'))

# the dynamic library name
pyctest_dylib_name = '@LIBNAME@@PYTHON_MODULE_EXTENSION@'

pyctest_dylib_path = os.path.join(this_path, '@LIBNAME@@PYTHON_MODULE_EXTENSION@')

if not os.path.exists(pyctest_dylib_path):
    pyctest_dylib_path = os.path.join(_tim_pypath, '@LIBNAME@@PYTHON_MODULE_EXTENSION@')
    if os.path.exists(pyctest_dylib_path):
        sys.path.append(_tim_pypath)
        pyctest_dylib_name = pyctest_dylib_path

# this is generally only used from the build tree
if not os.path.exists(pyctest_dylib_path):
    # info file should have paths we need
    if "pyctest_dynamic_library" in pyctest_info_data.keys():
        pyctest_dylib_path = pyctest_info_data["pyctest_dynamic_library"]

    # Visual Studio and Xcode put libraries in
    # <LIBRARY_OUTPUT_DIRECTORY>/<CMAKE_BUILD_TYPE> in the build tree
    if not os.path.exists(pyctest_dylib_path):
        for build_type in [ "Release", "RelWithDebInfo", "MinSizeRel", "Debug" ]:
            pyctest_dylib_path = os.path.join(this_path,
                os.path.join('{}'.format(build_type), '@LIBNAME@@PYTHON_MODULE_EXTENSION@'))
            if os.path.exists(pyctest_dylib_path):
                sys.path.append(os.path.join(this_path, build_type))
                break
    pyctest_dylib_name = pyctest_dylib_path

if _verbose > 1:
    print('Bootstrapping "{}" from "{}"...'.format(pyctest_dylib_name, pyctest_dylib_path))

# import the compiled pyctest module
pyctest = pyctest_py.__bootstrap__(pyctest_dylib_name)

# define the version_info
pyctest.__setattr__("version_info", (@PYCTEST_VERSION_MAJOR@,
                                      @PYCTEST_VERSION_MINOR@,
                                      @PYCTEST_VERSION_PATCH@) )

# define the version string
pyctest.__setattr__("version", "@PYCTEST_VERSION@" )

pyctest.__setattr__("build_info",
                     { "date" : "@PYCTEST_INSTALL_DATE@",
                       "library_architecture" : "@CMAKE_SYSTEM_PROCESSOR@",
                       "system_name" : "@CMAKE_SYSTEM_NAME@",
                       "system_version" : "@CMAKE_SYSTEM_VERSION@",
                       "build_type" : "@CMAKE_BUILD_TYPE@",
                       "compiler" : "@CMAKE_CXX_COMPILER@",
                       "compiler_id" : "@CMAKE_CXX_COMPILER_ID@",
                       "compiler_version" : "@CMAKE_CXX_COMPILER_VERSION@" } )

try:
    with warnings.catch_warnings():
        # load the submodule
        __init_utl = __load_module('util', os.path.join(this_path, 'util/__init__.py'))
        # add the submodule attributes
        pyctest.__setattr__("util", __init_utl.__self)
except:
    warnings.warn("pyctest was unable to import '{}' submodule. {}".format("util", e))

try:
    with warnings.catch_warnings():
        # load the submodule
        __init_mpi = __load_module('mpi_support', os.path.join(this_path, 'mpi_support/__init__.py'))
        # add the submodule attributes
        pyctest.__setattr__("mpi_support", __init_mpi.__self)
except:
    warnings.warn("pyctest was unable to import '{}' submodule. {}".format("mpi_support", e))

# load the submodule
try:
    with warnings.catch_warnings():
        __init_plt = __load_module('plotting', os.path.join(this_path, 'plotting/__init__.py'))
        # add the submodule attributes
        pyctest.__setattr__("plotting", __init_plt.__self)
except:
    warnings.warn("pyctest was unable to import '{}' submodule. {}".format("plotting", e))

try:
    with warnings.catch_warnings():
        # load the submodule
        __init_tst = __load_module('tests', os.path.join(this_path, 'tests/__init__.py'))
        # add the submodule attributes
        pyctest.__setattr__("tests", __init_tst.__self)
except Exception as e:
    warnings.warn("pyctest was unable to import '{}' submodule. {}".format("tests", e))
